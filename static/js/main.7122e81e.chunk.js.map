{"version":3,"sources":["redux/rootReducer.js","components/NavLogo.js","components/HeaderNav.js","redux/actions.js","redux/types.js","components/StyledInput.js","components/FormReusable.js","components/EditModal.js","components/SessionItem.js","components/SessionsList.js","pages/SessionsPage.js","pages/AddSessionPage.js","App.js","serviceWorker.js","index.js"],"names":["newState","initialState","sort","sortField","filter","sessions","id","date","type","distance","comment","StyledLogo","styled","span","NavLogo","className","HeaderNav","toggle","activeTab","Nav","tabs","NavItem","NavLink","classnames","active","onClick","field","payload","StyledInput","Input","FormReusable","props","button","formik","trigger","Button","block","outline","color","Form","onSubmit","handleSubmit","FormGroup","Row","form","Col","md","Label","for","name","onChange","handleChange","value","values","bind","sm","required","step","min","placeholder","mapDispatchToProps","editSession","session","connect","item","modal","useFormik","initialValues","Date","toLocaleDateString","Modal","isOpen","ModalHeader","parseDate","parse","year","month","day","formatDate","ModalBody","deleteSession","useState","setModal","filterField","state","items","map","key","dropdownOpen","setDropdownOpen","Table","style","width","Dropdown","prevState","DropdownToggle","tag","caret","DropdownMenu","DropdownItem","e","target","innerHTML","toLowerCase","Container","length","Alert","showMessage","StyledContainer","createSession","resetForm","newItem","now","App","store","setActiveTab","dispatch","window","innerWidth","innerHeight","tab","TabContent","TabPane","tabId","AddSessionPage","Boolean","location","hostname","match","createStore","action","data","JSON","localStorage","getItem","setItem","stringify","cloneData","concat","sortType","orderedData","_","orderBy","compose","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7122e81e.chunk.js","sourcesContent":["import { FETCH_SESSIONS, CREATE_SESSION, EDIT_SESSION, DELETE_SESSION, SORT_FIELD, FILTER_FIELD } from './types'\r\nimport _ from 'lodash'\r\n\r\nconst initialState = {\r\n  sort: 'desc',\r\n  sortField: 'date',\r\n  filter: 'all',\r\n  sessions: [\r\n    {id: '2123471483', date: '2020.09.18', type: 'skiing', distance: 3.7, comment: 'freezing'},\r\n    {id: '1123481741', date: '2020.08.23', type: 'jogging', distance: 9.5, comment: '5 kkal burnt'},\r\n    {id: '1239921311', date: '2019.08.25', type: 'skiing', distance: 0.7, comment: 'freeze'},\r\n    {id: '9978564124', date: '2020.12.12', type: 'walking', distance: 10.0, comment: 'time travelling'},\r\n    {id: '1212421473', date: '2020.09.20', type: 'cycling', distance: 5.6, comment: 'in the city center'},\r\n  ]\r\n}\r\n\r\nlet newState\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // fetch localStorage\r\n    case FETCH_SESSIONS:\r\n      let data = JSON.parse(localStorage.getItem('state')) || initialState\r\n      return { ...data }\r\n\r\n    // create new session\r\n    case CREATE_SESSION:\r\n      newState = [...state.sessions, action.payload]\r\n      localStorage.setItem('state', JSON.stringify({...state, sessions: newState}))\r\n      return { ...state, sessions: newState}\r\n\r\n    // edit existing session\r\n    case EDIT_SESSION:\r\n      newState = state.sessions.filter(item => {\r\n        return item.id !== action.payload.id\r\n      })\r\n      localStorage.setItem('state', JSON.stringify({...state, sessions: [...newState, action.payload]}))\r\n      return { ...state, sessions: [...newState, action.payload]}\r\n\r\n    // delete selected session\r\n    case DELETE_SESSION:\r\n      newState = state.sessions.filter(item => {\r\n        return item.id !== action.payload\r\n      })\r\n      localStorage.setItem('state', JSON.stringify({...state, sessions: newState}))\r\n      return { ...state, sessions: newState}\r\n\r\n    // sort sessions by field types\r\n    case SORT_FIELD:\r\n      const cloneData = state.sessions.concat()\r\n      const sortType = state.sort === 'asc' ? 'desc' : 'asc'\r\n      \r\n      let orderedData = {}\r\n      if (action.payload === 'date') {\r\n        orderedData = _.orderBy(cloneData, function(item) {\r\n          return new Date(item.date)\r\n        }, sortType);\r\n      } else orderedData = _.orderBy(cloneData, action.payload, sortType)\r\n      return { ...state, sort: sortType, sessions: [...orderedData], }\r\n\r\n    // filter sessions by activity type\r\n    case FILTER_FIELD:\r\n      return { ...state, filter: action.payload }\r\n    default: return state\r\n  }\r\n}","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst StyledLogo = styled.span`\r\n  font-size: 1.3rem;\r\n  font-weight: 500;\r\n  background: -webkit-linear-gradient(#11998e, #38ef7d);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n`\r\nexport const NavLogo = () => {\r\n  return (\r\n    <div className=\"ml-auto mr-5\">\r\n      <StyledLogo>\r\n        BestRunner\r\n      </StyledLogo>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { NavLogo } from './NavLogo'\r\nimport classnames from 'classnames';\r\n\r\nexport const HeaderNav = ({toggle, activeTab}) => {\r\n  return (\r\n    <Nav tabs className=\"mb-4 d-flex align-items-center\">\r\n      <NavItem>\r\n        <NavLink\r\n          className={classnames({ active: activeTab === '1' })}\r\n          onClick={() => { toggle('1') }}\r\n        >\r\n          My sessions\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink\r\n          className={classnames({ active: activeTab === '2' })}\r\n          onClick={() => { toggle('2') }}\r\n        >\r\n          Add new session\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavLogo />\r\n    </Nav>\r\n  )\r\n}","import { FETCH_SESSIONS, CREATE_SESSION, EDIT_SESSION, DELETE_SESSION, SORT_FIELD, FILTER_FIELD } from \"./types\";\r\n\r\nexport function fetchSessions() {\r\n  return {\r\n    type: FETCH_SESSIONS,\r\n  }\r\n}\r\n\r\nexport function createSession(session) {\r\n  return {\r\n    type: CREATE_SESSION,\r\n    payload: session\r\n  }\r\n}\r\n\r\nexport function editSession(session) {\r\n  return {\r\n    type: EDIT_SESSION,\r\n    payload: session\r\n  }\r\n}\r\n\r\nexport function deleteSession(id) {\r\n  return {\r\n    type: DELETE_SESSION,\r\n    payload: id\r\n  }\r\n}\r\n\r\nexport function sortField(field) {\r\n  return {\r\n    type: SORT_FIELD,\r\n    payload: field\r\n  }\r\n}\r\n\r\nexport function filterField(field) {\r\n  return {\r\n    type: FILTER_FIELD,\r\n    payload: field\r\n  }\r\n}","export const FETCH_SESSIONS = 'FETCH_SESSIONS'\r\nexport const CREATE_SESSION = 'CREATE_SESSION'\r\nexport const EDIT_SESSION = 'EDIT_SESSION'\r\nexport const DELETE_SESSION = 'DELETE_SESSION'\r\nexport const SORT_FIELD = 'SORT_FIELD'\r\nexport const FILTER_FIELD = 'FILTER_FIELD'","import styled from '@emotion/styled'\r\nimport { Input } from 'reactstrap'\r\n\r\nexport const StyledInput = styled(Input)`\r\n    height: 50px;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n    border: 0;\r\n    border-bottom: 2px solid #9b9b9b;\r\n    outline: 0;\r\n    font-weight: 500;\r\n    font-size: 1.8rem;\r\n    color: #00000099;\r\n    padding: 7px 0;\r\n    background: transparent;\r\n    transition: border-bottom, color 0.4s;\r\n  &:focus {\r\n    padding-bottom: 6px;  \r\n    font-weight: 700;\r\n    background: -webkit-linear-gradient(#11998e, #38ef7d);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    border-width: 3px;\r\n    border-image: linear-gradient(to right, #11998e, #38ef7d);\r\n    border-image-slice: 1;\r\n    border-color: inherit;\r\n    -webkit-box-shadow: none;\r\n    box-shadow: none;\r\n    outline: none;\r\n  }\r\n  &::-webkit-outer-spin-button { \r\n    -webkit-appearance: none; \r\n    margin: 0;\r\n  }\r\n  &::-webkit-inner-spin-button { \r\n    -webkit-appearance: none; \r\n    margin: 0; \r\n  }\r\n  &::-webkit-input-placeholder {\r\n    text-align: right;\r\n  }\r\n  &:-moz-placeholder {\r\n    text-align: right;\r\n  }\r\n`","import React from 'react'\r\nimport { Form, FormGroup, Label, Input, Row, Col, Button } from 'reactstrap'\r\nimport {StyledInput} from './StyledInput'\r\n\r\nexport const FormReusable = (props) => {\r\n  const {\r\n    formik,\r\n    toggle = null,\r\n    trigger = 'new'\r\n  } = props\r\n\r\n  let button\r\n  // create confirm button\r\n  if (trigger === 'edit') {\r\n    button = (\r\n      <Button onClick={toggle} block outline color=\"success\" type=\"submit\">\r\n      Edit\r\n    </Button>\r\n    )\r\n  }\r\n  else {\r\n    button = (\r\n      <Button block outline color=\"success\" type=\"submit\">\r\n        Add\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Form className=\"form\" onSubmit={formik.handleSubmit}>\r\n      <FormGroup>\r\n        <Row form>\r\n          <Col md={5}>\r\n            <Label for={trigger + \"date\"}>Session date</Label>\r\n            <Input\r\n              id={trigger + \"date\"}\r\n              type=\"date\"\r\n              name=\"date\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.date}\r\n            />\r\n          </Col>\r\n          <Col md={7}>\r\n            <Label for={trigger + \"type\"}>Activity type</Label>\r\n            <Input\r\n              id={trigger + \"type\"}\r\n              type=\"select\"\r\n              name=\"type\"\r\n              onChange={formik.handleChange.bind(this)}\r\n              value={formik.values.type}\r\n            >\r\n              <option value=\"jogging\">Jogging</option>\r\n              <option value=\"skiing\">Skiing</option>\r\n              <option value=\"cycling\">Cycling</option>\r\n              <option value=\"walking\">Walking</option>\r\n            </Input>\r\n          </Col>\r\n        </Row>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for={trigger + \"comment\"}>Extra info</Label>\r\n        <Input\r\n          id={trigger + \"comment\"}\r\n          type=\"textarea\"\r\n          name=\"comment\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.comment}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup className=\"d-flex justify-content-around\">\r\n        <Col sm={5}>\r\n          <Label for={trigger + \"distance\"}>Distance</Label>\r\n          <StyledInput\r\n            id={trigger + \"distance\"}\r\n            type=\"number\"\r\n            required\r\n            step=\"0.1\"\r\n            min=\"0\"\r\n            name=\"distance\"\r\n            placeholder=\"km\"\r\n            onChange={formik.handleChange}\r\n            value={formik.values.distance}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        {button}\r\n      </FormGroup>\r\n    </Form>\r\n  )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport { useFormik } from 'formik'\r\nimport { editSession, sortField } from '../redux/actions'\r\nimport { FormReusable } from './FormReusable'\r\n\r\nconst EditModal = (props) => {\r\n  const {\r\n    item,\r\n    modal,\r\n    toggle\r\n  } = props;\r\n\r\n  const formatDate = () => {\r\n    let parseDate = Date.parse(item.date)\r\n    return new Date(parseDate).toLocaleDateString(\"en-US\", {year: 'numeric', month: 'short', day: 'numeric'})\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      id: item.id,\r\n      date: new Date(item.date).toLocaleDateString('en-CA'),\r\n      type: item.type,\r\n      distance: item.distance,\r\n      comment: item.comment\r\n    },\r\n    onSubmit: (values) => {\r\n      props.editSession(values)\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Edit session of {formatDate()}</ModalHeader>\r\n        <ModalBody>\r\n          <FormReusable formik={formik} toggle={toggle} trigger={'edit'}/>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = { editSession, sortField }\r\n\r\nexport default connect(null, mapDispatchToProps)(EditModal)","import React, {useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button } from 'reactstrap'\r\nimport { FiDelete, FiEdit2 } from 'react-icons/fi'\r\nimport { deleteSession } from '../redux/actions'\r\nimport EditModal from './EditModal'\r\n\r\nconst SessionItem = ({deleteSession, ...props}) => {\r\n  let {item} = props\r\n  \r\n  const formatDate = () => {\r\n    let parseDate = Date.parse(item.date)\r\n    return new Date(parseDate).toLocaleDateString(\"en-US\", {year: 'numeric', month: 'short', day: 'numeric'})\r\n  }\r\n\r\n  // modal toggle function\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <tr>\r\n      <td>{formatDate()}</td>\r\n      <td>{item.type}</td>\r\n      <td>{item.distance} km</td>\r\n      <td className=\"text-break\">{item.comment}</td>\r\n      <td className=\"text-center\">\r\n        {/* edit button and modal */}\r\n        <Button color=\"link\" className=\"p-0 text-success\">\r\n          <FiEdit2 onClick={toggle}/>\r\n        </Button>\r\n        <EditModal modal={modal} toggle={toggle} item={item}/>\r\n      </td>\r\n      <td>\r\n        {/* delete button */}\r\n        <Button onClick={() => deleteSession(item.id)} color=\"link\" className=\"p-0 text-dark\">\r\n          <FiDelete />\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = { deleteSession }\r\n\r\nexport default connect(null, mapDispatchToProps)(SessionItem)","import React, {useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Table } from 'reactstrap';\r\nimport SessionItem from './SessionItem';\r\nimport { sortField, filterField } from '../redux/actions'\r\n\r\nconst SessionsList = ({sortField, filterField, filter, ...props}) => {\r\n  let {sessions} = props\r\n  let items\r\n\r\n  // show filtered items\r\n  if (filter === 'all')\r\n    items = sessions.map(item => <SessionItem item={item} key={item.id} />)\r\n  else {\r\n    items = sessions\r\n    .filter(item => item.type === filter)\r\n    .map(item => <SessionItem item={item} key={item.id} />)\r\n  }\r\n\r\n  // 'activity' reactstrap dropdown state\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <th\r\n            className=\"dropdown-toggle\"\r\n            onClick={sortField.bind(null, 'date')}\r\n            style={{width: '18%'}}\r\n          >\r\n            Date\r\n          </th>\r\n          {/* 'activity' filter dropdown */}\r\n          <th>\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n              <DropdownToggle tag=\"a\" className=\"text-dark p-0\" caret>\r\n                Activity\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem onClick={(e) => filterField(e.target.innerHTML.toLowerCase())}>All</DropdownItem>\r\n                <DropdownItem onClick={(e) => filterField(e.target.innerHTML.toLowerCase())}>Cycling</DropdownItem>\r\n                <DropdownItem onClick={(e) => filterField(e.target.innerHTML.toLowerCase())}>Skiing</DropdownItem>\r\n                <DropdownItem onClick={(e) => filterField(e.target.innerHTML.toLowerCase())}>Jogging</DropdownItem>\r\n                <DropdownItem onClick={(e) => filterField(e.target.innerHTML.toLowerCase())}>Walking</DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          </th>\r\n          <th\r\n            className=\"dropdown-toggle\"\r\n            onClick={sortField.bind(null, 'distance')}\r\n          >\r\n              Distance\r\n          </th>\r\n          <th style={{width: '25%'}}>\r\n              Comment\r\n          </th>\r\n          <th style={{width: '5%'}}>Edit</th>\r\n          <th style={{width: '10px'}}></th>\r\n        </tr>\r\n      </thead>\r\n      \r\n      <tbody>\r\n        {items}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.filter,\r\n    sessions: state.sessions\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { sortField, filterField }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionsList)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Container, Alert } from 'reactstrap';\r\nimport SessionsList from '../components/SessionsList'\r\n\r\nconst SessionsPage = ({sessions}) => {\r\n  const showMessage = () => {\r\n    if (!sessions.length) {\r\n      return (\r\n        <Alert color=\"info\">\r\n          Add your first activity record\r\n        </Alert>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className=\"mb-4\">Session list</h1>\r\n      <SessionsList />\r\n      { showMessage() }\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    sessions: state.sessions\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SessionsPage)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createSession } from '../redux/actions'\r\nimport { FormReusable } from '../components/FormReusable'\r\nimport styled from '@emotion/styled'\r\nimport { Container } from 'reactstrap'\r\nimport { useFormik } from 'formik'\r\n\r\nconst StyledContainer = styled(Container)`\r\n  max-width: 500px;\r\n`\r\n\r\nconst SessionForm = (props) => {\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      date: new Date().toLocaleDateString('en-CA'),\r\n      type: 'jogging',\r\n      distance: '',\r\n      comment: ''\r\n    },\r\n    onSubmit: (values, {resetForm}) => {\r\n      const newItem = {\r\n        id: Date.now(),\r\n        ...values,\r\n      }\r\n      props.createSession(newItem)\r\n      resetForm({values: ''})\r\n    },\r\n  })\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <h1>New Session</h1>\r\n      <hr />\r\n      <FormReusable formik={formik}/>\r\n    </StyledContainer>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = { createSession }\r\n\r\nexport default connect(null, mapDispatchToProps)(SessionForm)","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'react-redux'\nimport { Container, TabContent, TabPane, Col, Alert } from 'reactstrap';\nimport { HeaderNav } from './components/HeaderNav'\nimport SessionsPage from './pages/SessionsPage'\nimport AddSessionPage from './pages/AddSessionPage'\nimport { fetchSessions, sortField } from './redux/actions';\n\nconst App = ({ store }) => {\n\n  // declare tab state \n  const [activeTab, setActiveTab] = useState('1');\n  const toggle = tab => {\n    if(activeTab !== tab) setActiveTab(tab);\n  }\n\n  store.dispatch(fetchSessions());\n  store.dispatch(sortField('date'));\n\n  const detectMobile = () => {\n    return (window.innerWidth <= 720 && window.innerHeight <= 600 );\n  }\n\n  return (\n    <Provider store={store}>\n    { detectMobile()\n      ? <Container className=\"row mw-100 vh-100 m-0\">\n          <Alert color=\"info\" className=\"m-auto\">\n            <span> please, run this website from desktop</span>\n          </Alert>\n        </Container>\n      : <Container className=\"w-75\">\n          {/* header */}\n          <HeaderNav toggle={toggle} activeTab={activeTab}/>\n\n          {/* tab contents: SessionsPage & AddSessionPage */}\n          <TabContent activeTab={activeTab}>\n            <TabPane tabId=\"1\">\n              <Col sm=\"12\">\n                <SessionsPage />\n              </Col>\n            </TabPane>\n            <TabPane tabId=\"2\">\n              <Col sm=\"12\">\n                <AddSessionPage />\n              </Col>\n            </TabPane>\n          </TabContent>\n        </Container>\n      }\n    </Provider>\n  )\n}\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { compose, createStore } from 'redux'\nimport { rootReducer } from './redux/rootReducer';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(rootReducer, compose(\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nrender(<App store={store} />, document.getElementById('root'))\n\nserviceWorker.unregister();\n"],"sourceRoot":""}